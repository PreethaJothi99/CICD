pipeline {
  agent any
  options { timestamps(); disableConcurrentBuilds() }
  triggers { githubPush() }

  environment {
    PATH            = "/usr/bin:/usr/local/bin:/usr/share/maven/bin:${PATH}"
    GIT_REPO        = 'https://github.com/PreethaJothi99/CICD.git'
    SONAR_HOST      = 'http://52.55.130.195:9000'
    DOCKER_IMAGE    = 'preethavanjothi21/cicd-webapp'
    PROJECT_KEY     = 'preetha-cicd'
    IMAGE_TAG       = "${env.BUILD_NUMBER}"
    TRIVY_CACHE_DIR = "${WORKSPACE}/.trivycache"
    // On your server, trivy is at /usr/bin/trivy (confirmed)
    TRIVY_BIN       = "/usr/bin/trivy"
  }

  stages {

    stage('Checkout') {
      steps {
        git branch: 'main', url: "${GIT_REPO}"
        sh '''
          echo "PATH=$PATH"
          which mvn || true
          which trivy || true
          ls -l "${TRIVY_BIN}" || true
          mvn -v
          mkdir -p "${TRIVY_CACHE_DIR}" reports
        '''
      }
    }

    stage('Build & Unit Test') {
      steps {
        sh 'mvn -B clean install -DskipTests=false'
        sh 'ls -la target || true'
      }
      post {
        always {
          junit testResults: '**/target/surefire-reports/*.xml', allowEmptyResults: true
          archiveArtifacts artifacts: 'target/*.war', fingerprint: true, allowEmptyArchive: true
        }
      }
    }

    stage('SonarQube Analysis') {
      steps {
        withCredentials([string(credentialsId: 'sonartoken', variable: 'SONAR_TOKEN')]) {
          sh '''
            mvn -B org.sonarsource.scanner.maven:sonar-maven-plugin:4.0.0.4121:sonar \
              -Dsonar.host.url=${SONAR_HOST} \
              -Dsonar.token=$SONAR_TOKEN \
              -Dsonar.projectKey=${PROJECT_KEY} \
              -Dsonar.projectName=${PROJECT_KEY} \
              -Dsonar.java.binaries=target
          '''
        }
      }
    }

    stage('Quality Gate (poll)') {
      steps {
        withCredentials([string(credentialsId: 'sonartoken', variable: 'SONAR_TOKEN')]) {
          sh '''
            set -e
            for i in $(seq 1 30); do
              STATUS=$(curl -s -u "$SONAR_TOKEN:" "${SONAR_HOST}/api/qualitygates/project_status?projectKey=${PROJECT_KEY}" \
                | sed -n 's/.*"status":"\\([^"]*\\)".*/\\1/p')
              echo "Quality Gate: ${STATUS}"
              [ "${STATUS}" = "OK" ] && exit 0
              [ "${STATUS}" = "ERROR" ] && echo "Quality Gate FAILED" && exit 1
              sleep 5
            done
            echo "Timed out waiting for Quality Gate"; exit 1
          '''
        }
      }
    }

    /* ===== Trivy Security Scans ===== */

    stage('Trivy FS (source)') {
      steps {
        sh '''
          set -e
          mkdir -p "${TRIVY_CACHE_DIR}" reports
          TRIVY="${TRIVY_BIN:-$(command -v trivy)}"
          echo "Using TRIVY at: ${TRIVY}"
          [ -x "${TRIVY}" ] || { echo "Trivy not executable at ${TRIVY}"; exit 127; }
          "${TRIVY}" fs \
            --exit-code 1 \
            --severity HIGH,CRITICAL \
            --no-progress \
            --cache-dir "${TRIVY_CACHE_DIR}" \
            --format table \
            --output reports/trivy-fs.txt \
            .
        '''
      }
      post { always { archiveArtifacts artifacts: 'reports/trivy-fs.txt', allowEmptyArchive: true } }
    }

    stage('Trivy K8s Config (manifests)') {
      steps {
        sh '''
          set -e
          mkdir -p "${TRIVY_CACHE_DIR}" reports
          TRIVY="${TRIVY_BIN:-$(command -v trivy)}"
          echo "Using TRIVY at: ${TRIVY}"
          "${TRIVY}" config \
            --exit-code 1 \
            --severity HIGH,CRITICAL \
            --no-progress \
            --cache-dir "${TRIVY_CACHE_DIR}" \
            --format table \
            --output reports/trivy-k8s-config.txt \
            deploymentfiles/
        '''
      }
      post { always { archiveArtifacts artifacts: 'reports/trivy-k8s-config.txt', allowEmptyArchive: true } }
    }

    stage('Build Docker Image') {
      steps {
        sh "docker build -t ${DOCKER_IMAGE}:${IMAGE_TAG} ."
      }
    }

    stage('Trivy Image (container)') {
      steps {
        sh '''
          set -e
          mkdir -p "${TRIVY_CACHE_DIR}" reports
          TRIVY="${TRIVY_BIN:-$(command -v trivy)}"
          echo "Using TRIVY at: ${TRIVY}"
          "${TRIVY}" image \
            --exit-code 1 \
            --severity HIGH,CRITICAL \
            --no-progress \
            --cache-dir "${TRIVY_CACHE_DIR}" \
            --format table \
            --output reports/trivy-image.txt \
            ${DOCKER_IMAGE}:${IMAGE_TAG}
        '''
      }
      post { always { archiveArtifacts artifacts: 'reports/trivy-image.txt', allowEmptyArchive: true } }
    }

    stage('Push to Docker Hub') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DH_USER', passwordVariable: 'DH_PASS')]) {
          sh 'echo "$DH_PASS" | docker login -u "$DH_USER" --password-stdin'
        }
        sh "docker push ${DOCKER_IMAGE}:${IMAGE_TAG}"
      }
      post { always { sh 'docker logout || true' } }
    }

    stage('Update image tag in deployment YAML') {
      steps {
        withCredentials([string(credentialsId: 'githubtoken', variable: 'GH_TOKEN')]) {
          sh """
            set -e
            git config user.email "ci-bot@example.com"
            git config user.name  "ci-bot"
            sed -i 's#^\\([[:space:]]*image:[[:space:]]*\\).*#\\1${DOCKER_IMAGE}:${IMAGE_TAG}#g' deploymentfiles/deployment.yml
            git add deploymentfiles/deployment.yml
            git commit -m "CI: set image ${DOCKER_IMAGE}:${IMAGE_TAG}" || echo "no changes"
            git push https://${GH_TOKEN}@github.com/PreethaJothi99/CICD.git HEAD:main
          """
        }
      }
    }
  } // stages

  post {
    failure { echo '❌ Pipeline failed. Check the Trivy reports under "reports/".' }
    success { echo "✅ Pipeline succeeded! Image: ${DOCKER_IMAGE}:${IMAGE_TAG}" }
  }
}
