pipeline {
  agent any
  options { timestamps(); disableConcurrentBuilds() }
  triggers { githubPush() }   // GitHub webhook triggers

  environment {
    GIT_REPO     = 'https://github.com/PreethaJothi99/CICD.git'
    SONAR_HOST   = 'http://98.83.151.73:9000'
    DOCKER_IMAGE = 'preethavanjothi21/cicd-webapp'
    PROJECT_KEY  = 'preetha-cicd'
  }

  stages {
    stage('Checkout') {
      steps {
        git branch: 'main', url: "${GIT_REPO}"
        sh 'which mvn && mvn -v'
      }
    }

    stage('Build & Unit Test') {
      steps {
        // Build a WAR (webapp) and run tests
        sh 'mvn -B clean package -DskipTests=false'
        sh 'ls -la target || true'
      }
      post {
        always {
          // publish tests if present; don't fail if none
          junit testResults: '**/target/surefire-reports/*.xml', allowEmptyResults: true
          // archive WAR (NOT jar); don't fail if missing
          archiveArtifacts artifacts: 'target/*.war', fingerprint: true, allowEmptyArchive: true
        }
      }
    }

    stage('SonarQube Analysis') {
      steps {
        withCredentials([string(credentialsId: 'sonartoken', variable: 'SONAR_TOKEN')]) {
          sh """
            mvn -B sonar:sonar \
              -Dsonar.host.url=${SONAR_HOST} \
              -Dsonar.token=${SONAR_TOKEN} \
              -Dsonar.projectKey=${PROJECT_KEY} \
              -Dsonar.projectName=${PROJECT_KEY} \
              -Dsonar.java.binaries=target
          """
        }
      }
    }

    // Polling quality gate (works without Jenkins Sonar server config)
    stage('Quality Gate') {
      steps {
        withCredentials([string(credentialsId: 'sonartoken', variable: 'SONAR_TOKEN')]) {
          sh """
            set -e
            echo "Waiting for SonarQube Quality Gate..."
            for i in \$(seq 1 30); do
              STATUS=\$(curl -s -u \${SONAR_TOKEN}: ${SONAR_HOST}/api/qualitygates/project_status?projectKey='${PROJECT_KEY}' \
                | sed -n 's/.*"status":"\\([^"]*\\)".*/\\1/p')
              echo "Current gate status: \${STATUS}"
              if [ "\${STATUS}" = "OK" ]; then exit 0; fi
              if [ "\${STATUS}" = "ERROR" ]; then echo "Quality Gate FAILED"; exit 1; fi
              sleep 5
            done
            echo "Timed out waiting for Quality Gate"; exit 1
          """
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        sh "docker build -t ${DOCKER_IMAGE}:${env.BUILD_NUMBER} ."
      }
    }

    stage('Push to Docker Hub') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DH_USER', passwordVariable: 'DH_PASS')]) {
          sh 'echo "$DH_PASS" | docker login -u "$DH_USER" --password-stdin'
        }
        sh "docker push ${DOCKER_IMAGE}:${BUILD_NUMBER}"
      }
    }

    stage('Update image tag in deployment YAML') {
      steps {
        withCredentials([string(credentialsId: 'githubtoken', variable: 'GH_TOKEN')]) {
          sh """
            set -e
            git config user.email "ci-bot@example.com"
            git config user.name  "ci-bot"
            sed -i "s#^\\([[:space:]]*image:[[:space:]]*\\).*#\\1${DOCKER_IMAGE}:${BUILD_NUMBER}#g" deploymentfiles/deployment.yml
            git add deploymentfiles/deployment.yml
            git commit -m "CI: set image ${DOCKER_IMAGE}:${BUILD_NUMBER}" || echo "no changes"
            git push https://${GH_TOKEN}@github.com/PreethaJothi99/CICD.git HEAD:main
          """
        }
      }
    }
  }
}
